# 9주차 개발 일지 - 넷플릭스 로그인 화면 구현

# 주제
React를 활용해 넷플릭스 로그인 UI를 클론하고, 인증 상태에 따라 화면 전환이 이루어지도록 인증 흐름을 구현했다.

## 구현 내용
- 넷플릭스 스타일의 로그인 UI 구성 (로고, 이메일/비밀번호 입력창, 에러 메시지, 버튼 포함)
- 로그인 성공 시 '/home'으로 리디렉션되도록 설정
- 로그인하지 않은 사용자가 '/home'에 접근하면 자동으로 '/login'으로 이동
- Context API를 활용해 로그인 상태를 전역에서 관리

## 구현 과정
1. 라우팅 설정 ('react-router-dom' 사용하여 /login과 /home 구성)
2. AuthContext 생성 - 로그인 상태를 useContext로 관리할 수 있도록 Provider 구성
3. ProtectedRoute 구현 - 로그인하지 않은 사용자는 /login으로 강제 이동되도록 설정
4. 로그인 성공 시 useNavigate를 활용하여 '/home'으로 리디렉션
5. 스타일링: 배경 이미지를 전면에 적용하고, 로그인 폼과 로고가 겹치지 않도록 z-index, margin 조정
6. 유효성 검사: 이메일 또는 비밀번호가 비어있거나 4자 미만일 때 에러 메시지 및 input 테두리 색상 변경

## 어려웠던 점 & 해결
- navigate('/home')가 /login/home으로 잘못 연결되어 'No routes matched' 에러 발생  
→ navigate 시 절대경로를 써야 한다는 것을 확인하고 '/home'으로 수정하여 해결

- useContext에서 login()을 꺼내려 했을 때 undefined 오류 발생  
→ App 컴포넌트에서 AuthProvider로 전체 앱을 감싸주지 않았던 것이 원인 → 구조 수정으로 해결

- 로고가 로그인 폼과 겹쳐 UI가 깨져 보였음  
→ position, z-index, margin-top을 조정해 시각적 계층을 분리함

- 배경이 화면 전체를 다 덮지 않고 하단이 남는 문제  
→ html, body, #root에 height: 100%를 주고, margin/padding 초기화로 해결

## 느낀 점
- Context와 Router를 조합해 사용자 흐름을 제어하는 패턴을 손으로 구현해보니, 상태 관리의 중요성을 체감할 수 있었다.
- 예상보다 CSS 조정이 중요했고, 실제 넷플릭스 스타일을 참고해 세세하게 맞춰가는 과정이 흥미로웠다.
